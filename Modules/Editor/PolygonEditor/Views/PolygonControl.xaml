<UserControl x:Class="VixenModules.Editor.PolygonEditor.Views.PolygonControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			 xmlns:catel="http://schemas.catelproject.com"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"              
			 xmlns:ikriv="clr-namespace:IKriv.Wpf"
			 xmlns:polygonConverters="clr-namespace:VixenModules.Editor.PolygonEditor.Converters"			 			 
		     xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
			 xmlns:views="clr-namespace:VixenModules.Editor.PolygonEditor.Views"
			 xmlns:viewmodels="clr-namespace:VixenModules.Editor.PolygonEditor.ViewModels"
			 xmlns:common="clr-namespace:Common.WPFCommon.Converters;assembly=WPFCommon"
			 mc:Ignorable="d" 
             d:DesignHeight="420" d:DesignWidth="800"
			 x:Name="PolygonUserControl">

	<UserControl.Resources>
		<polygonConverters:PointCollectionConverter x:Key="mcolconv" />
		<polygonConverters:PolygonPointConverter x:Key="polyPointConv" />
		<ikriv:MathConverter x:Key="MathConverter" />
		<Color x:Key="BackColor">#444444</Color>
		<BooleanToVisibilityConverter x:Key="BoolToVis" />
		<common:ColorToSolidBrushConverter  x:Key="ColorToSolidColorBrush_ValueConverter"/>
	</UserControl.Resources>

	<DockPanel Margin="20,20,20,20">
		<Grid DockPanel.Dock="Bottom" HorizontalAlignment="Stretch">
			<Grid.ColumnDefinitions>
				<ColumnDefinition/>
			</Grid.ColumnDefinitions>
			<Grid.RowDefinitions>
				<RowDefinition/>
				<RowDefinition/>
				<RowDefinition/>
			</Grid.RowDefinitions>
			<views:PolygonTimeBar x:Name="PolygonTimeBar" Grid.Column="1" Grid.Row="1" Visibility="{Binding Path=TimeBarVisible, Converter={StaticResource BoolToVis}}">
			</views:PolygonTimeBar>
			<WrapPanel Grid.Column="1" Grid.Row="2" Margin="20,2,0,0" Visibility="{Binding Path=TimeBarVisible, Converter={StaticResource BoolToVis}}">
				<Button Width="40" Height="40" Grid.Column="1" Grid.Row="2" Command="{Binding PreviousPolygonSnapShotCommand}">
					<Image Source="/PolygonEditor;component/Images/arrow_left.png"></Image>
				</Button>
				<Button Width="40" Height="40" Grid.Column="1" Grid.Row="2" Margin="10,0,0,0" Command="{Binding NextPolygonSnapShotCommand}">
					<Image Source="/PolygonEditor;component/Images/arrow_right.png"></Image>
				</Button>
				<Button Grid.Column="1" Grid.Row="2" Margin="10,0,0,0" Command="{Binding AddPolygonSnapShotCommand}">Add Frame</Button>
				<Button Grid.Column="1" Grid.Row="2" Margin="10,0,0,0" Command="{Binding DeletePolygonSnapShotCommand}">Delete Frame</Button>
			</WrapPanel>
		</Grid>
				
			<Grid HorizontalAlignment="Stretch">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="120" />
				</Grid.ColumnDefinitions>
			
			<Viewbox Stretch="Uniform" x:Name="viewBox" Grid.Column="0">
					<views:PolygonCanvas  x:Name="canvas" 
             MouseMove="Canvas_MouseMove" 
             MouseLeftButtonDown="Canvas_MouseLeftButtonDown"  		                  
			 MouseEnter="Canvas_MouseEnter"
			 MouseLeftButtonUp="Canvas_MouseLeftButtonUp"
				Height="{Binding Path=CanvasHeight}" 
				Width="{Binding Path=CanvasWidth}">

						<Canvas.Background>
							<SolidColorBrush Color="#444444" Opacity="1"/>
						</Canvas.Background>

						<Line X1="{Binding Path=PreviousPointMoving.X}"
				  Y1="{Binding Path=PreviousPointMoving.Y}"
				  X2="{Binding Path=PointMoving.X}" 
                  Y2="{Binding Path=PointMoving.Y}"
				  Stroke="LightGray" StrokeThickness="1" StrokeDashArray="2 2"
				  Visibility="{Binding Path=MovingPointVisibilityPrevious, Converter={StaticResource BoolToVis}}"/>

						<Line X1="{Binding Path=PointMoving.X}"
				  Y1="{Binding Path=PointMoving.Y}"
				  X2="{Binding Path=NextPointMoving.X}" 
                  Y2="{Binding Path=NextPointMoving.Y}"
				  Stroke="LightGray" StrokeThickness="1" StrokeDashArray="2 2"
				  Visibility="{Binding Path=MovingPointVisibilityNext, Converter={StaticResource BoolToVis}}"/>

						<Rectangle
				Width="6"
				Height="6"
				Stroke="LightGray"
				Fill="LightGray"
				Canvas.Left="{Binding Path=PointMoving.X, Converter={ikriv:MathConverter}, ConverterParameter=x-3}"
				Canvas.Top="{Binding Path=PointMoving.Y, Converter={ikriv:MathConverter}, ConverterParameter=x-3}" 
				Visibility="{Binding Path=MovingPointVisibilityPrevious, Converter={StaticResource BoolToVis}}"/>

						<ItemsControl ItemsSource="{Binding Polygons}">
							<ItemsControl.ItemsPanel>
								<ItemsPanelTemplate>
									<Canvas>
									</Canvas>
								</ItemsPanelTemplate>
							</ItemsControl.ItemsPanel>

						<ItemsControl.ItemTemplate>
							<DataTemplate>
								<Grid>
									<Polygon Name="Polygon" Stroke="Black" StrokeThickness="3" 
							Points="{Binding PointCollection, Converter={StaticResource mcolconv}}" 
							Visibility = "{Binding Visibility, Converter={StaticResource BoolToVis}}"
						    IsHitTestVisible="False"/>

									<Line X1="{Binding CenterPoint.X, Converter={ikriv:MathConverter}, ConverterParameter=x-20}"
							  Y1="{Binding CenterPoint.Y }"
							  X2="{Binding CenterPoint.X, Converter={ikriv:MathConverter}, ConverterParameter=x+20}" 
							  Y2="{Binding CenterPoint.Y }"
							  Stroke="{Binding CenterPointColor, Converter={StaticResource ColorToSolidColorBrush_ValueConverter}}" StrokeThickness="1"
							  Visibility="{Binding Visibility, Converter={StaticResource BoolToVis}}"
							  IsHitTestVisible="False"/>

									<Line X1="{Binding CenterPoint.X}"
						      Y1="{Binding CenterPoint.Y, Converter={ikriv:MathConverter}, ConverterParameter=x-20}"
							  X2="{Binding CenterPoint.X}" 
							  Y2="{Binding CenterPoint.Y, Converter={ikriv:MathConverter}, ConverterParameter=x+20}"
							  Stroke="{Binding CenterPointColor, Converter={StaticResource ColorToSolidColorBrush_ValueConverter}}" StrokeThickness="1" 
							  Visibility="{Binding Visibility, Converter={StaticResource BoolToVis}}"
							  IsHitTestVisible="False"/>

									<ItemsControl ItemsSource="{Binding Segments}"
						    Visibility="{Binding Path=SegmentsVisible, Converter={StaticResource BoolToVis}}">

										<ItemsControl.ItemsPanel>
											<ItemsPanelTemplate>
												<Canvas></Canvas>
											</ItemsPanelTemplate>
										</ItemsControl.ItemsPanel>

										<ItemsControl.ItemTemplate>
											<DataTemplate>
												<Line Stroke="{Binding Color, Converter={StaticResource ColorToSolidColorBrush_ValueConverter}}" StrokeThickness="2" IsHitTestVisible="False"
									X1="{Binding Point1.X}"
									Y1="{Binding Point1.Y}"
									X2="{Binding Point2.X}"
									Y2="{Binding Point2.Y}" />
											</DataTemplate>
										</ItemsControl.ItemTemplate>
									</ItemsControl>
									<!-- Begin Child ItemsControl-->
									<ItemsControl ItemsSource="{Binding PointCollection}">
										<ItemsControl.ItemsPanel>
											<ItemsPanelTemplate>
												<Canvas></Canvas>
											</ItemsPanelTemplate>
										</ItemsControl.ItemsPanel>
										<ItemsControl.ItemTemplate>
											<DataTemplate>
												<Rectangle Width="6" Height="6" 
											   Stroke="{Binding Color, Converter={StaticResource ColorToSolidColorBrush_ValueConverter}}" 
											   Fill="{Binding Color, Converter={StaticResource ColorToSolidColorBrush_ValueConverter}}"
											   IsHitTestVisible="False"/>
											</DataTemplate>
										</ItemsControl.ItemTemplate>

										<ItemsControl.ItemContainerStyle>
											<Style>
												<Setter Property="Canvas.Left" Value="{Binding X, Converter={ikriv:MathConverter}, ConverterParameter=x-3}"/>
												<Setter Property="Canvas.Top" Value="{Binding Y, Converter={ikriv:MathConverter}, ConverterParameter=x-3}"/>
											</Style>
										</ItemsControl.ItemContainerStyle>
									</ItemsControl>
									<!-- End Child Items Control -->

									<ItemsControl ItemsSource="{Binding PointCollection}">
										<ItemsControl.ItemsPanel>
											<ItemsPanelTemplate>
												<Canvas></Canvas>
											</ItemsPanelTemplate>
										</ItemsControl.ItemsPanel>
										<ItemsControl.ItemTemplate>
											<DataTemplate>
												<TextBlock Text="{Binding Label}"/>
											</DataTemplate>
										</ItemsControl.ItemTemplate>

										<ItemsControl.ItemContainerStyle>
											<Style>
												<Setter Property="Canvas.Left" Value="{Binding X, Converter={ikriv:MathConverter}, ConverterParameter=x+5}"/>
												<Setter Property="Canvas.Top" Value="{Binding Y, Converter={ikriv:MathConverter}, ConverterParameter=x+5}"/>
											</Style>
										</ItemsControl.ItemContainerStyle>
									</ItemsControl>
								</Grid>
							</DataTemplate>
						</ItemsControl.ItemTemplate>
					</ItemsControl>

						<ItemsControl ItemsSource="{Binding Lines}">
							<ItemsControl.ItemsPanel>
								<ItemsPanelTemplate>
									<Canvas>
									</Canvas>
								</ItemsPanelTemplate>
							</ItemsControl.ItemsPanel>

							<ItemsControl.ItemTemplate>
								<DataTemplate>
									<Grid>
										<Line Stroke="Black" StrokeThickness="2" IsHitTestVisible="False"
									X1="{Binding StartPoint.X}"
									Y1="{Binding StartPoint.Y}"
									X2="{Binding EndPoint.X}"
									Y2="{Binding EndPoint.Y}"/>

										<Line X1="{Binding CenterPoint.X, Converter={ikriv:MathConverter}, ConverterParameter=x-20}"
							  Y1="{Binding CenterPoint.Y }"
							  X2="{Binding CenterPoint.X, Converter={ikriv:MathConverter}, ConverterParameter=x+20}" 
							  Y2="{Binding CenterPoint.Y }"
							  Stroke="{Binding CenterPointColor, Converter={StaticResource ColorToSolidColorBrush_ValueConverter}}" StrokeThickness="1"
							  Visibility="{Binding Visibility, Converter={StaticResource BoolToVis}}"
							  IsHitTestVisible="False"/>

										<Line X1="{Binding CenterPoint.X}"
						      Y1="{Binding CenterPoint.Y, Converter={ikriv:MathConverter}, ConverterParameter=x-20}"
							  X2="{Binding CenterPoint.X}" 
							  Y2="{Binding CenterPoint.Y, Converter={ikriv:MathConverter}, ConverterParameter=x+20}"
							  Stroke="{Binding CenterPointColor, Converter={StaticResource ColorToSolidColorBrush_ValueConverter}}" StrokeThickness="1" 
							  Visibility="{Binding Visibility, Converter={StaticResource BoolToVis}}"
							  IsHitTestVisible="False"/>



										<Path 
								Visibility="{Binding Visibility, Converter={StaticResource BoolToVis}}"
								IsHitTestVisible="False"
								Stroke="{Binding CenterPointColor, Converter={StaticResource ColorToSolidColorBrush_ValueConverter}}" 
								StrokeThickness="1" >
											<Path.Data>
												<EllipseGeometry 									
						            Center="{Binding Path=CenterPoint.Point}" 
									RadiusX="20" 
									RadiusY="20" />
											</Path.Data>
										</Path>
																				
										<!-- Square Points -->
										<ItemsControl ItemsSource="{Binding PointCollection}">
											<ItemsControl.ItemsPanel>
												<ItemsPanelTemplate>
													<Canvas></Canvas>
												</ItemsPanelTemplate>
											</ItemsControl.ItemsPanel>
											<ItemsControl.ItemTemplate>
												<DataTemplate>
													<Rectangle Width="6" Height="6" 
											   Stroke="{Binding Color, Converter={StaticResource ColorToSolidColorBrush_ValueConverter}}" 
											   Fill="{Binding Color, Converter={StaticResource ColorToSolidColorBrush_ValueConverter}}"
											   IsHitTestVisible="False"/>
												</DataTemplate>
											</ItemsControl.ItemTemplate>

											<ItemsControl.ItemContainerStyle>
												<Style>
													<Setter Property="Canvas.Left" Value="{Binding X, Converter={ikriv:MathConverter}, ConverterParameter=x-3}"/>
													<Setter Property="Canvas.Top" Value="{Binding Y, Converter={ikriv:MathConverter}, ConverterParameter=x-3}"/>
												</Style>
											</ItemsControl.ItemContainerStyle>
										</ItemsControl>

									<ItemsControl ItemsSource="{Binding PointCollection}">
										<ItemsControl.ItemsPanel>
											<ItemsPanelTemplate>
												<Canvas></Canvas>
											</ItemsPanelTemplate>
										</ItemsControl.ItemsPanel>
										<ItemsControl.ItemTemplate>
											<DataTemplate>
												<TextBlock Text="{Binding Label}"/>
											</DataTemplate>
										</ItemsControl.ItemTemplate>

										<ItemsControl.ItemContainerStyle>
											<Style>
												<Setter Property="Canvas.Left" Value="{Binding X, Converter={ikriv:MathConverter}, ConverterParameter=x+5}"/>
												<Setter Property="Canvas.Top" Value="{Binding Y, Converter={ikriv:MathConverter}, ConverterParameter=x+5}"/>
											</Style>
										</ItemsControl.ItemContainerStyle>
									</ItemsControl>

								</Grid>
								</DataTemplate>
							</ItemsControl.ItemTemplate>
						</ItemsControl>
					</views:PolygonCanvas>
				</Viewbox>

			
			<DataGrid Name="pointDataGrid" AutoGenerateColumns="False" DataContext="Binding Path=SelectedPoints" Margin="10,0,0,0" 
				  RowHeaderWidth="0" DockPanel.Dock="Right" Grid.Column="1">
				<DataGrid.Columns>
					<DataGridTextColumn Header="X" Width="*">
						<DataGridTextColumn.Binding>
							<Binding Path="X">
								<Binding.Converter>
									<polygonConverters:PolygonPointConverter/>
								</Binding.Converter>
								<Binding.ValidationRules>
									<viewmodels:XValidationRule/>
								</Binding.ValidationRules>
							</Binding>
						</DataGridTextColumn.Binding>
						<DataGridTextColumn.EditingElementStyle>
							<Style TargetType="TextBox">
								<Setter Property="Validation.ErrorTemplate">
									<Setter.Value>
										<ControlTemplate>
											<StackPanel>
												<AdornedElementPlaceholder x:Name="placeholder" />
												<Popup HorizontalAlignment="Left" PopupAnimation="Fade" Placement="Bottom" IsOpen="true">
													<Grid Background="White">
														<TextBlock Foreground="Red"  Text="{Binding [0].ErrorContent}"/>
													</Grid>
												</Popup>
											</StackPanel>
										</ControlTemplate>
									</Setter.Value>
								</Setter>
							</Style>
						</DataGridTextColumn.EditingElementStyle>
					</DataGridTextColumn>

					<DataGridTextColumn Header="Y" Width="*">
						<DataGridTextColumn.Binding>
							<Binding Path="Y">
								<Binding.Converter>
									<polygonConverters:PolygonPointConverter/>
								</Binding.Converter>
								<Binding.ValidationRules>
									<viewmodels:YValidationRule/>
								</Binding.ValidationRules>
							</Binding>
						</DataGridTextColumn.Binding>
						<DataGridTextColumn.EditingElementStyle>
							<Style TargetType="TextBox">
								<Setter Property="Validation.ErrorTemplate">
									<Setter.Value>
										<ControlTemplate>
											<StackPanel>
												<AdornedElementPlaceholder x:Name="placeholder" />
												<Popup HorizontalAlignment="Left" PopupAnimation="Fade" Placement="Bottom" IsOpen="true">
													<Grid Background="White">
														<TextBlock Foreground="Red"  Text="{Binding [0].ErrorContent}"/>
													</Grid>
												</Popup>
											</StackPanel>
										</ControlTemplate>
									</Setter.Value>
								</Setter>
							</Style>
						</DataGridTextColumn.EditingElementStyle>
					</DataGridTextColumn>
				</DataGrid.Columns>
			<DataGrid.RowValidationErrorTemplate>
				<ControlTemplate>
					<Grid Margin="0,-2,0,-2"
					ToolTip="{Binding RelativeSource={RelativeSource
					FindAncestor, AncestorType={x:Type DataGridRow}},
					Path=(Validation.Errors)[0].ErrorContent}">
						<Ellipse StrokeThickness="0" Fill="Red" 
					Width="{TemplateBinding FontSize}" 
					Height="{TemplateBinding FontSize}" />
						<TextBlock Text="!" FontSize="{TemplateBinding FontSize}" 
					FontWeight="Bold" Foreground="White" 
					HorizontalAlignment="Center"  />
					</Grid>
				</ControlTemplate>
			</DataGrid.RowValidationErrorTemplate>
		</DataGrid>
		</Grid>
	</DockPanel>
</UserControl>
